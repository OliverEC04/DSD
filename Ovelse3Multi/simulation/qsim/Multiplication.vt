// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/20/2023 12:00:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mult
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mult_vlg_sample_tst(
	A,
	B,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
output sampler_tx;

reg sample;
time current_time;
always @(A or B)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mult_vlg_check_tst (
	Produkt,
	sampler_rx
);
input [15:0] Produkt;
input sampler_rx;

reg [15:0] Produkt_expected;

reg [15:0] Produkt_prev;

reg [15:0] Produkt_expected_prev;

reg [15:0] last_Produkt_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	Produkt_prev = Produkt;
end

// update expected /o prevs

always @(trigger)
begin
	Produkt_expected_prev = Produkt_expected;
end



// expected Produkt[0]
initial
begin
	Produkt_expected[0] = 1'bX;
end 

// expected Produkt[1]
initial
begin
	Produkt_expected[1] = 1'bX;
end 

// expected Produkt[2]
initial
begin
	Produkt_expected[2] = 1'bX;
end 

// expected Produkt[3]
initial
begin
	Produkt_expected[3] = 1'bX;
end 

// expected Produkt[4]
initial
begin
	Produkt_expected[4] = 1'bX;
end 

// expected Produkt[5]
initial
begin
	Produkt_expected[5] = 1'bX;
end 

// expected Produkt[6]
initial
begin
	Produkt_expected[6] = 1'bX;
end 

// expected Produkt[7]
initial
begin
	Produkt_expected[7] = 1'bX;
end 

// expected Produkt[8]
initial
begin
	Produkt_expected[8] = 1'bX;
end 

// expected Produkt[9]
initial
begin
	Produkt_expected[9] = 1'bX;
end 

// expected Produkt[10]
initial
begin
	Produkt_expected[10] = 1'bX;
end 

// expected Produkt[11]
initial
begin
	Produkt_expected[11] = 1'bX;
end 

// expected Produkt[12]
initial
begin
	Produkt_expected[12] = 1'bX;
end 

// expected Produkt[13]
initial
begin
	Produkt_expected[13] = 1'bX;
end 

// expected Produkt[14]
initial
begin
	Produkt_expected[14] = 1'bX;
end 

// expected Produkt[15]
initial
begin
	Produkt_expected[15] = 1'bX;
end 
// generate trigger
always @(Produkt_expected or Produkt)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Produkt = %b | ",Produkt_expected_prev);
	$display("| real Produkt = %b | ",Produkt_prev);
`endif
	if (
		( Produkt_expected_prev[0] !== 1'bx ) && ( Produkt_prev[0] !== Produkt_expected_prev[0] )
		&& ((Produkt_expected_prev[0] !== last_Produkt_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Produkt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Produkt_expected_prev);
		$display ("     Real value = %b", Produkt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Produkt_exp[0] = Produkt_expected_prev[0];
	end
	if (
		( Produkt_expected_prev[1] !== 1'bx ) && ( Produkt_prev[1] !== Produkt_expected_prev[1] )
		&& ((Produkt_expected_prev[1] !== last_Produkt_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Produkt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Produkt_expected_prev);
		$display ("     Real value = %b", Produkt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Produkt_exp[1] = Produkt_expected_prev[1];
	end
	if (
		( Produkt_expected_prev[2] !== 1'bx ) && ( Produkt_prev[2] !== Produkt_expected_prev[2] )
		&& ((Produkt_expected_prev[2] !== last_Produkt_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Produkt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Produkt_expected_prev);
		$display ("     Real value = %b", Produkt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Produkt_exp[2] = Produkt_expected_prev[2];
	end
	if (
		( Produkt_expected_prev[3] !== 1'bx ) && ( Produkt_prev[3] !== Produkt_expected_prev[3] )
		&& ((Produkt_expected_prev[3] !== last_Produkt_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Produkt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Produkt_expected_prev);
		$display ("     Real value = %b", Produkt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Produkt_exp[3] = Produkt_expected_prev[3];
	end
	if (
		( Produkt_expected_prev[4] !== 1'bx ) && ( Produkt_prev[4] !== Produkt_expected_prev[4] )
		&& ((Produkt_expected_prev[4] !== last_Produkt_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Produkt[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Produkt_expected_prev);
		$display ("     Real value = %b", Produkt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Produkt_exp[4] = Produkt_expected_prev[4];
	end
	if (
		( Produkt_expected_prev[5] !== 1'bx ) && ( Produkt_prev[5] !== Produkt_expected_prev[5] )
		&& ((Produkt_expected_prev[5] !== last_Produkt_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Produkt[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Produkt_expected_prev);
		$display ("     Real value = %b", Produkt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Produkt_exp[5] = Produkt_expected_prev[5];
	end
	if (
		( Produkt_expected_prev[6] !== 1'bx ) && ( Produkt_prev[6] !== Produkt_expected_prev[6] )
		&& ((Produkt_expected_prev[6] !== last_Produkt_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Produkt[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Produkt_expected_prev);
		$display ("     Real value = %b", Produkt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Produkt_exp[6] = Produkt_expected_prev[6];
	end
	if (
		( Produkt_expected_prev[7] !== 1'bx ) && ( Produkt_prev[7] !== Produkt_expected_prev[7] )
		&& ((Produkt_expected_prev[7] !== last_Produkt_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Produkt[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Produkt_expected_prev);
		$display ("     Real value = %b", Produkt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Produkt_exp[7] = Produkt_expected_prev[7];
	end
	if (
		( Produkt_expected_prev[8] !== 1'bx ) && ( Produkt_prev[8] !== Produkt_expected_prev[8] )
		&& ((Produkt_expected_prev[8] !== last_Produkt_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Produkt[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Produkt_expected_prev);
		$display ("     Real value = %b", Produkt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Produkt_exp[8] = Produkt_expected_prev[8];
	end
	if (
		( Produkt_expected_prev[9] !== 1'bx ) && ( Produkt_prev[9] !== Produkt_expected_prev[9] )
		&& ((Produkt_expected_prev[9] !== last_Produkt_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Produkt[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Produkt_expected_prev);
		$display ("     Real value = %b", Produkt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Produkt_exp[9] = Produkt_expected_prev[9];
	end
	if (
		( Produkt_expected_prev[10] !== 1'bx ) && ( Produkt_prev[10] !== Produkt_expected_prev[10] )
		&& ((Produkt_expected_prev[10] !== last_Produkt_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Produkt[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Produkt_expected_prev);
		$display ("     Real value = %b", Produkt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Produkt_exp[10] = Produkt_expected_prev[10];
	end
	if (
		( Produkt_expected_prev[11] !== 1'bx ) && ( Produkt_prev[11] !== Produkt_expected_prev[11] )
		&& ((Produkt_expected_prev[11] !== last_Produkt_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Produkt[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Produkt_expected_prev);
		$display ("     Real value = %b", Produkt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Produkt_exp[11] = Produkt_expected_prev[11];
	end
	if (
		( Produkt_expected_prev[12] !== 1'bx ) && ( Produkt_prev[12] !== Produkt_expected_prev[12] )
		&& ((Produkt_expected_prev[12] !== last_Produkt_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Produkt[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Produkt_expected_prev);
		$display ("     Real value = %b", Produkt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Produkt_exp[12] = Produkt_expected_prev[12];
	end
	if (
		( Produkt_expected_prev[13] !== 1'bx ) && ( Produkt_prev[13] !== Produkt_expected_prev[13] )
		&& ((Produkt_expected_prev[13] !== last_Produkt_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Produkt[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Produkt_expected_prev);
		$display ("     Real value = %b", Produkt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Produkt_exp[13] = Produkt_expected_prev[13];
	end
	if (
		( Produkt_expected_prev[14] !== 1'bx ) && ( Produkt_prev[14] !== Produkt_expected_prev[14] )
		&& ((Produkt_expected_prev[14] !== last_Produkt_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Produkt[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Produkt_expected_prev);
		$display ("     Real value = %b", Produkt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Produkt_exp[14] = Produkt_expected_prev[14];
	end
	if (
		( Produkt_expected_prev[15] !== 1'bx ) && ( Produkt_prev[15] !== Produkt_expected_prev[15] )
		&& ((Produkt_expected_prev[15] !== last_Produkt_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Produkt[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Produkt_expected_prev);
		$display ("     Real value = %b", Produkt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Produkt_exp[15] = Produkt_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mult_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
// wires                                               
wire [15:0] Produkt;

wire sampler;                             

// assign statements (if any)                          
mult i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.Produkt(Produkt)
);

// A[0]
initial
begin
	A[0] = 1'b0;
	A[0] = #40000 1'b1;
	A[0] = #90000 1'b0;
end 

// A[1]
initial
begin
	A[1] = 1'b0;
end 

// A[2]
initial
begin
	A[2] = 1'b0;
	A[2] = #80000 1'b1;
	A[2] = #160000 1'b0;
end 

// A[3]
initial
begin
	A[3] = 1'b0;
	A[3] = #80000 1'b1;
	A[3] = #160000 1'b0;
end 

// A[4]
initial
begin
	A[4] = 1'b0;
end 

// A[5]
initial
begin
	A[5] = 1'b0;
end 

// A[6]
initial
begin
	A[6] = 1'b0;
end 

// A[7]
initial
begin
	A[7] = 1'b0;
end 

// B[0]
initial
begin
	B[0] = 1'b0;
	B[0] = #60000 1'b1;
	B[0] = #80000 1'b0;
end 

// B[1]
initial
begin
	B[1] = 1'b0;
end 

// B[2]
initial
begin
	B[2] = 1'b0;
	B[2] = #140000 1'b1;
	B[2] = #120000 1'b0;
end 

// B[3]
initial
begin
	B[3] = 1'b0;
end 

// B[4]
initial
begin
	B[4] = 1'b0;
end 

// B[5]
initial
begin
	B[5] = 1'b0;
end 

// B[6]
initial
begin
	B[6] = 1'b0;
end 

// B[7]
initial
begin
	B[7] = 1'b0;
end 

mult_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.sampler_tx(sampler)
);

mult_vlg_check_tst tb_out(
	.Produkt(Produkt),
	.sampler_rx(sampler)
);
endmodule

